name: Docker (2025 Enhanced Security)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'mcp_duckduckgo/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'mcp_duckduckgo/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-security-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx (Latest)
      uses: docker/setup-buildx-action@v3
      with:
        version: latest
        buildkitd-flags: --debug

    - name: Build distroless production image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        push: false
        tags: test:production-distroless
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        outputs: type=docker,dest=/tmp/production-image.tar

    - name: Build slim production image (fallback)
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production-slim
        push: false
        tags: test:production-slim
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Load Docker image
      run: |
        docker load --input /tmp/production-image.tar

    - name: Docker Scout vulnerability scan
      uses: docker/scout-action@v1
      if: always()
      with:
        command: cves
        image: test:production-distroless
        format: sarif
        output: docker-scout.sarif
        write-comment: true
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker Scout SBOM generation
      uses: docker/scout-action@v1
      if: always()
      with:
        command: sbom
        image: test:production-distroless
        format: spdx
        output: sbom.spdx.json

    - name: Docker Scout policy evaluation
      uses: docker/scout-action@v1
      if: always()
      with:
        command: policy
        image: test:production-distroless
        write-comment: true
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Trivy comprehensive scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: test:production-distroless
        format: 'sarif'
        output: 'trivy-results.sarif'
        scan-type: 'image'
        severity: 'CRITICAL,HIGH,MEDIUM'
        hide-progress: false

    - name: Trivy secrets scan
      uses: aquasecurity/trivy-action@master
      if: always()
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-secrets.sarif'
        scanners: 'secret'

    - name: Image size optimization check
      run: |
        echo "üîç Image size analysis:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep test:
        
        # Check for optimal image size (should be under 100MB for distroless)
        DISTROLESS_SIZE=$(docker inspect test:production-distroless --format='{{.Size}}')
        SLIM_SIZE=$(docker inspect test:production-slim --format='{{.Size}}')
        
        echo "üìä Distroless image size: $(($DISTROLESS_SIZE / 1024 / 1024))MB"
        echo "üìä Slim image size: $(($SLIM_SIZE / 1024 / 1024))MB"
        
        if [ $DISTROLESS_SIZE -gt 104857600 ]; then  # 100MB
          echo "‚ö†Ô∏è Warning: Distroless image is larger than 100MB"
        else
          echo "‚úÖ Distroless image size is optimal"
        fi

    - name: Upload Docker Scout SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: docker-scout.sarif
        category: docker-scout

    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy-image

    - name: Upload Trivy secrets scan
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-secrets.sarif'
        category: trivy-secrets

    - name: Upload security artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-security-results
        path: |
          docker-scout.sarif
          sbom.spdx.json
          trivy-results.sarif
          trivy-secrets.sarif
        retention-days: 90

  docker-test:
    runs-on: ubuntu-latest
    needs: docker-security-analysis
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: development
        push: false
        tags: test:development
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose config
        docker-compose --profile test up --build --abort-on-container-exit

  docker-publish-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-

    - name: Build and push development image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: development
        cache-from: type=gha
        cache-to: type=gha,mode=max